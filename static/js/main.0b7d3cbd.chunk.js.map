{"version":3,"sources":["Buttons/button.js","App.js","index.js"],"names":["Button","content","onButtonPress","type","onClick","className","App","useState","value","setValue","memory","setMemory","operator","setOperator","date","setDate","setInterval","Date","toLocaleTimeString","handleButtonPress","num","parseFloat","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b7d3cbd.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nconst Button = ({content ,onButtonPress,type})=>{\r\n    return <div  onClick={onButtonPress(content)} className={` Button  ${content ===  \"0\" ? \"zero\": \"\" }${ type || \"\" }`} >\r\n        {content}\r\n        {/*  */}\r\n    </div>\r\n}\r\nexport default Button;","import React, { useState } from \"react\";\nimport Button from \"./Buttons/button\";\n\nconst App = () => {\n  const [value, setValue] = useState(\"0\");\n  const [memory, setMemory] = useState(null);\n  const [operator, setOperator] = useState(null);\n  const [date,setDate] = useState(\"\")\n  setInterval(() => {\n  setDate(new Date().toLocaleTimeString())\n\n  }, 1000);\n  const handleButtonPress = (content) => () => {\n    const num = parseFloat(value);\n    if (content === \"AC\") {\n      setMemory(null);\n      return setValue(\"0\");\n    }\n    if (content === \"±\") {\n      setValue((num * -1).toString());\n      return;\n    }\n    if (content === \"%\") {\n      setValue((num / 100).toString());\n      setMemory(null);\n      return;\n    }\n    if (content === \"÷\") {\n      if (operator !== null) {\n        if (operator === \"÷\") {\n          setMemory(memory / parseFloat(value));\n        } else if (operator === \"x\") {\n          setMemory(memory * parseFloat(value));\n        } else if (operator === \"-\") {\n          setMemory(memory - parseFloat(value));\n        } else if (operator === \"+\") {\n          setMemory(memory + parseFloat(value));\n        }\n      }\n       else {\n        setMemory(parseFloat(value));\n      }\n      setValue(\"0\");\n      setOperator(\"÷\");\n      return;\n    }\n    if (content === \"x\") {\n      if (operator !== null) {\n        if (operator === \"÷\") {\n          setMemory(memory / parseFloat(value));\n        } else if (operator === \"x\") {\n          setMemory(memory * parseFloat(value));\n        } else if (operator === \"-\") {\n          setMemory(memory - parseFloat(value));\n        } else if (operator === \"+\") {\n          setMemory(memory + parseFloat(value));\n        }\n      }\n       else {\n        setMemory(parseFloat(value));\n      }\n      setValue(\"0\");\n      setOperator(\"x\");\n\n      return;\n    }\n    if (content === \"-\") {\n      if (operator !== null) {\n        if (operator === \"÷\") {\n          setMemory(memory / parseFloat(value));\n        } else if (operator === \"x\") {\n          setMemory(memory * parseFloat(value));\n        } else if (operator === \"-\") {\n          setMemory(memory - parseFloat(value));\n        } else if (operator === \"+\") {\n          setMemory(memory + parseFloat(value));\n        }\n      }\n       else {\n        setMemory(parseFloat(value));\n      }\n      setValue(\"0\");\n      setOperator(\"-\");\n\n      return;\n    }\n    if (content === \"+\") {\n      if (operator !== null) {\n        if (operator === \"÷\") {\n          setMemory(memory / parseFloat(value));\n        } else if (operator === \"x\") {\n          setMemory(memory * parseFloat(value));\n        } else if (operator === \"-\") {\n          setMemory(memory - parseFloat(value));\n        } else if (operator === \"+\") {\n          setMemory(memory + parseFloat(value));\n        }\n      }\n       else {\n        setMemory(parseFloat(value));\n      }\n\n      setValue(\"0\");\n      setOperator(\"+\");\n\n      return;\n    }\n    if (content === \"=\") {\n      if (!operator) return;\n      if (operator === \"÷\") {\n        setValue((memory / parseFloat(value)).toString());\n      } else if (operator === \"x\") {\n        setValue((memory * parseFloat(value)).toString());\n      } else if (operator === \"-\") {\n        setValue((memory - parseFloat(value)).toString());\n      } else if (operator === \"+\") {\n        setValue((memory + parseFloat(value)).toString());\n      }\n      setMemory(null);\n      setOperator(null);\n      return;\n    }\n      setValue(parseFloat(num + content).toString());\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"top\">{date}</div>\n      <div className=\"display\">{value}</div>\n      <div className=\"button\">\n        <Button\n          onButtonPress={handleButtonPress}\n          content=\"AC\"\n          type=\"function \"\n        />\n        <Button\n          onButtonPress={handleButtonPress}\n          content=\"%\"\n          type=\"function \"\n        />\n        <Button\n          onButtonPress={handleButtonPress}\n          content=\"÷\"\n          type=\"function \"\n        />\n        <Button onButtonPress={handleButtonPress} content=\"±\" type=\"operator\" />\n        <Button onButtonPress={handleButtonPress} content=\"7\" />\n        <Button onButtonPress={handleButtonPress} content=\"8\" />\n        <Button onButtonPress={handleButtonPress} content=\"9\" />\n        <Button onButtonPress={handleButtonPress} content=\"x\" type=\"operator\" />\n        <Button onButtonPress={handleButtonPress} content=\"4\" />\n        <Button onButtonPress={handleButtonPress} content=\"5\" />\n        <Button onButtonPress={handleButtonPress} content=\"6\" />\n        <Button onButtonPress={handleButtonPress} content=\"-\" type=\"operator\" />\n        <Button onButtonPress={handleButtonPress} content=\"1\" />\n        <Button onButtonPress={handleButtonPress} content=\"2\" />\n        <Button onButtonPress={handleButtonPress} content=\"3\" />\n        <Button onButtonPress={handleButtonPress} content=\"+\" type=\"operator\" />\n        <Button onButtonPress={handleButtonPress} content=\"0\" />\n        <Button onButtonPress={handleButtonPress} content=\".\" />\n        <Button onButtonPress={handleButtonPress} content=\"=\" type=\"operator\" />\n      </div>\n      <div className=\"buttom\">_</div>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css'\n\n\n\nReactDOM.render(<App/> ,document.getElementById('root'))"],"sourceRoot":""}